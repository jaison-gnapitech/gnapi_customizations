[
 {
  "actions": [],
  "allow_guest_to_view": 0,
  "api_method": null,
  "api_method_name": null,
  "beta": 0,
  "client_script": null,
  "color": null,
  "compatible": null,
  "condition": null,
  "custom": 1,
  "description": "Auto set employee for Custom Timesheet when user has Employee role",
  "docstatus": 0,
  "doctype": "Server Script",
  "documentation": null,
  "enabled": 1,
  "event_frequency": "On Save",
  "event_frequency_meta": null,
  "event_frequency_meta_value": null,
  "event_frequency_value": "On Save",
  "event_type": "DocType",
  "event_type_doc": "Custom Timesheet",
  "event_type_docfield": null,
  "event_type_field": null,
  "event_type_value": "Custom Timesheet",
  "external_service": null,
  "method": "validate",
  "modified": "2025-09-25 19:25:00.000000",
  "name": "Auto Set Employee for Custom Timesheet",
  "priority": 0,
  "reference_doctype": "Custom Timesheet",
  "script": "# Auto set employee for Employee role users\nif frappe.session.user != 'Administrator':\n    # Check if user has Employee role\n    user_roles = frappe.get_roles()\n    if 'Employee' in user_roles:\n        # Get employee linked to this user\n        employee = frappe.db.get_value('Employee', {'user_id': frappe.session.user}, 'name')\n        if employee:\n            doc.employee = employee\n        else:\n            frappe.throw('No employee record found for user {0}'.format(frappe.session.user))",
  "script_type": "DocType Event",
  "script_type_meta": null,
  "script_type_meta_value": null,
  "script_type_value": "DocType Event",
  "sort_order": 0,
  "submitted": 0
 },
 {
  "actions": [],
  "allow_guest_to_view": 0,
  "api_method": null,
  "api_method_name": null,
  "beta": 0,
  "client_script": null,
  "color": null,
  "compatible": null,
  "condition": null,
  "custom": 1,
  "description": "Calculate taken hours from start and end datetime",
  "docstatus": 0,
  "doctype": "Server Script",
  "documentation": null,
  "enabled": 1,
  "event_frequency": "Before Save",
  "event_frequency_meta": null,
  "event_frequency_meta_value": null,
  "event_frequency_value": "Before Save",
  "event_type": "DocType",
  "event_type_doc": "Custom Timesheet Detail",
  "event_type_docfield": null,
  "event_type_field": null,
  "event_type_value": "Custom Timesheet Detail",
  "external_service": null,
  "method": "before_save",
  "modified": "2025-09-25 19:25:00.000000",
  "name": "Calculate Taken Hours",
  "priority": 0,
  "reference_doctype": "Custom Timesheet Detail",
  "script": "# Calculate taken hours and validate date range\nif doc.start_date_time and doc.end_date_time:\n    try:\n        # Parse datetime values\n        start_dt = frappe.utils.get_datetime(doc.start_date_time)\n        end_dt = frappe.utils.get_datetime(doc.end_date_time)\n        \n        if start_dt and end_dt:\n            # Get the parent timesheet document for validation\n            if doc.parent and doc.parenttype == 'Custom Timesheet':\n                parent_doc = frappe.get_doc('Custom Timesheet', doc.parent)\n                \n                # Get timesheet date range\n                if parent_doc.week_start_date and parent_doc.week_end_date:\n                    timesheet_start_date = parent_doc.week_start_date\n                    timesheet_end_date = parent_doc.week_end_date\n                    \n                    # Convert to datetime objects for comparison\n                    timesheet_start_dt = frappe.utils.get_datetime(str(timesheet_start_date) + ' 00:00:00')\n                    timesheet_end_dt = frappe.utils.get_datetime(str(timesheet_end_date) + ' 23:59:59')\n                    \n                    # Validate start datetime is within range\n                    if start_dt < timesheet_start_dt or start_dt > timesheet_end_dt:\n                        frappe.throw(f'Start Date and Time ({start_dt.strftime(\"%Y-%m-%d %H:%M:%S\")}) must be between {timesheet_start_date} 00:00:00 and {timesheet_end_date} 23:59:59')\n                    \n                    # Validate end datetime is within range\n                    if end_dt < timesheet_start_dt or end_dt > timesheet_end_dt:\n                        frappe.throw(f'End Date and Time ({end_dt.strftime(\"%Y-%m-%d %H:%M:%S\")}) must be between {timesheet_start_date} 00:00:00 and {timesheet_end_date} 23:59:59')\n            \n            # Validate that end time is after start time\n            if end_dt <= start_dt:\n                frappe.throw('End Date and Time must be after Start Date and Time')\n            \n            # Calculate hours\n            time_diff_seconds = frappe.utils.time_diff_in_seconds(end_dt, start_dt)\n            hours = time_diff_seconds / 3600.0\n            \n            # Validate maximum hours (24 hours)\n            if hours > 24:\n                frappe.throw('Working hours cannot exceed 24 hours per day')\n            \n            # Set calculated hours\n            doc.taken_hours = round(hours, 2)\n        else:\n            doc.taken_hours = 0\n            \n    except frappe.ValidationError:\n        # Re-raise validation errors (these should stop the save)\n        raise\n    except Exception as e:\n        # Log other errors and set hours to 0\n        frappe.log_error(f'Error in time calculation: {str(e)}', 'Time Calculation Error')\n        doc.taken_hours = 0\nelse:\n    # If either datetime is missing, set to 0\n    doc.taken_hours = 0",
  "script_type": "DocType Event",
  "script_type_meta": null,
  "script_type_meta_value": null,
  "script_type_value": "DocType Event",
  "sort_order": 0,
  "submitted": 0
 },
 {
  "actions": [],
  "allow_guest_to_view": 0,
  "api_method": null,
  "api_method_name": null,
  "beta": 0,
  "client_script": null,
  "color": null,
  "compatible": null,
  "condition": null,
  "custom": 1,
  "description": "Update total hours in Custom Timesheet from time logs",
  "docstatus": 0,
  "doctype": "Server Script",
  "documentation": null,
  "enabled": 1,
  "event_frequency": "On Save",
  "event_frequency_meta": null,
  "event_frequency_meta_value": null,
  "event_frequency_value": "On Save",
  "event_type": "DocType",
  "event_type_doc": "Custom Timesheet",
  "event_type_docfield": null,
  "event_type_field": null,
  "event_type_value": "Custom Timesheet",
  "external_service": null,
  "method": "validate",
  "modified": "2025-09-25 19:25:00.000000",
  "name": "Update Custom Timesheet Total Hours",
  "priority": 0,
  "reference_doctype": "Custom Timesheet",
  "script": "# Update total hours from time logs\ntotal_hours = 0\nif doc.time_logs:\n    for time_log in doc.time_logs:\n        if time_log.taken_hours:\n            total_hours += time_log.taken_hours\n\ndoc.total_hours = round(total_hours, 2)",
  "script_type": "DocType Event",
  "script_type_meta": null,
  "script_type_meta_value": null,
  "script_type_value": "DocType Event",
  "sort_order": 0,
  "submitted": 0
 },
 {
  "actions": [],
  "allow_guest_to_view": 0,
  "api_method": null,
  "api_method_name": null,
  "beta": 0,
  "client_script": null,
  "color": null,
  "compatible": null,
  "condition": null,
  "custom": 1,
  "description": "Set default status for Employee role users",
  "docstatus": 0,
  "doctype": "Server Script",
  "documentation": null,
  "enabled": 1,
  "event_frequency": "On Save",
  "event_frequency_meta": null,
  "event_frequency_meta_value": null,
  "event_frequency_value": "On Save",
  "event_type": "DocType",
  "event_type_doc": "Custom Timesheet",
  "event_type_docfield": null,
  "event_type_field": null,
  "event_type_value": "Custom Timesheet",
  "external_service": null,
  "method": "validate",
  "modified": "2025-09-25 19:25:00.000000",
  "name": "Set Default Status for Employee",
  "priority": 0,
  "reference_doctype": "Custom Timesheet",
  "script": "# Set default status for Employee role users\nif not doc.status:\n    user_roles = frappe.get_roles()\n    if 'Employee' in user_roles:\n        doc.status = 'Draft'",
  "script_type": "DocType Event",
  "script_type_meta": null,
  "script_type_meta_value": null,
  "script_type_value": "DocType Event",
  "sort_order": 0,
  "submitted": 0
 }
]