[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-16 12:43:14.619121",
  "module": "Gnapi Customizations",
  "name": "Validate Active Approver",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Project",
  "script": "if not any(d.active for d in doc.custom_timesheet_approvers):\n    frappe.throw(\"At least one Timesheet Approver must be marked as active.\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-17 18:48:54.887995",
  "module": "Gnapi Customizations",
  "name": "Create Approval Requests",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Timesheet",
  "script": "for td in doc.time_logs:\n    if td.project is not None:\n        project = frappe.get_doc(\"Project\", td.project)\n        for aprvr in project.custom_timesheet_approvers:\n            new_approval = frappe.new_doc(\"Timesheet Task Approval\")\n            new_approval.approver = aprvr.approver\n            new_approval.hours = td.hours\n            new_approval.project = td.project\n            new_approval.task = td.task\n            new_approval.is_billable = td.is_billable\n            new_approval.employee = doc.employee\n            new_approval.status = \"Pending\"\n            new_approval.timesheet = td.parent\n            new_approval.insert()\n            # Assign it to a specific user\n            todo = frappe.new_doc(\"ToDo\")\n            todo.assigned_by = frappe.session.user\n            todo.owner = aprvr.approver\n            todo.reference_type = \"Timesheet Task Approval\"\n            todo.reference_name = new_approval.name\n            todo.description = \"New task approval required.\"\n            todo.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-09-25 19:25:00.000000",
  "module": "Gnapi Customizations",
  "name": "Calculate Weekly Timesheet Total Hours",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Weekly Timesheet",
  "script": "# Calculate total hours from time logs\nif doc.time_logs:\n    total_hours = 0\n    for time_log in doc.time_logs:\n        if time_log.hours:\n            total_hours += time_log.hours\n    doc.total_hours = total_hours\nelse:\n    doc.total_hours = 0",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-09-25 19:25:00.000000",
  "module": "Gnapi Customizations",
  "name": "Validate Weekly Timesheet Dates",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Weekly Timesheet",
  "script": "# Validate that week end date is after week start date\nif doc.week_start_date and doc.week_end_date:\n    if doc.week_end_date <= doc.week_start_date:\n        frappe.throw(\"Week End Date must be after Week Start Date\")\n\n# Validate that dates are within the same week\nif doc.week_start_date and doc.week_end_date:\n    from datetime import datetime, timedelta\n    start_date = datetime.strptime(str(doc.week_start_date), '%Y-%m-%d')\n    end_date = datetime.strptime(str(doc.week_end_date), '%Y-%m-%d')\n    \n    # Check if end date is within 7 days of start date\n    if (end_date - start_date).days > 6:\n        frappe.throw(\"Week End Date should be within 7 days of Week Start Date\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-09-25 19:25:00.000000",
  "module": "Gnapi Customizations",
  "name": "Validate Weekly Timesheet Time Logs",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Weekly Timesheet",
  "script": "# Validate time logs\nif doc.time_logs:\n    for time_log in doc.time_logs:\n        # Check if date is within the week range\n        if doc.week_start_date and doc.week_end_date and time_log.date:\n            if time_log.date < doc.week_start_date or time_log.date > doc.week_end_date:\n                frappe.throw(f\"Date {time_log.date} in time log is outside the week range ({doc.week_start_date} to {doc.week_end_date})\")\n        \n        # Validate hours\n        if time_log.hours and time_log.hours <= 0:\n            frappe.throw(\"Hours must be greater than 0\")\n        \n        if time_log.hours and time_log.hours > 24:\n            frappe.throw(\"Hours cannot exceed 24 per day\")",
  "script_type": "DocType Event"
 }
]